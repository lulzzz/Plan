# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2018-02-20 03:03
from __future__ import unicode_literals

import apps.projects.app_sourcing.models
import core.mixins_model
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DimCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='customer')),
                ('code', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'verbose_name': 'Customer',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimFabric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_code', models.CharField(max_length=100, unique=True)),
                ('material_group', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('fiber_content', models.CharField(blank=True, max_length=100, null=True)),
                ('construction', models.CharField(blank=True, max_length=100, null=True)),
                ('material_type', models.CharField(blank=True, max_length=100, null=True)),
                ('material_subtype', models.CharField(blank=True, max_length=100, null=True)),
                ('material_class', models.CharField(blank=True, max_length=100, null=True)),
                ('material_class_remark', models.CharField(blank=True, max_length=100, null=True)),
                ('weight', models.CharField(blank=True, max_length=30, null=True)),
                ('weight_uom', models.CharField(blank=True, max_length=100, null=True, verbose_name='weight UOM')),
                ('width', models.CharField(blank=True, max_length=30, null=True)),
                ('width_uom', models.CharField(blank=True, max_length=100, null=True, verbose_name='width UOM')),
            ],
            options={
                'verbose_name': 'Fabric',
                'ordering': ['material_code'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=45)),
                ('country', models.CharField(max_length=100, unique=True)),
                ('country_code_a2', models.CharField(max_length=2, unique=True, validators=[django.core.validators.RegexValidator(code='nomatch', message='Length must be 2', regex='^.{2}$')], verbose_name='country code A2')),
                ('country_code_a3', models.CharField(max_length=3, unique=True, validators=[django.core.validators.RegexValidator(code='nomatch', message='Length must be 3', regex='^.{3}$')], verbose_name='country code A3')),
                ('is_gsp_eligible', models.BooleanField(verbose_name='is GSP eligible')),
                ('is_tpp_eligible', models.BooleanField(verbose_name='is TPP eligible')),
            ],
            options={
                'verbose_name': 'Location',
                'ordering': ['country'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_name', models.CharField(blank=True, max_length=300, null=True)),
                ('image_relative_path', models.CharField(blank=True, max_length=500, null=True, verbose_name='image')),
                ('style', models.CharField(max_length=100, unique=True)),
                ('silhouette', models.CharField(blank=True, max_length=45, null=True)),
                ('fabric_weight', models.CharField(blank=True, max_length=45, null=True)),
                ('fabric_class', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('fob', models.FloatField(blank=True, null=True, verbose_name='FOB')),
                ('dim_customer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimCustomer')),
                ('dim_fabric', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimFabric')),
            ],
            options={
                'verbose_name': 'Product',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='class')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Product Class',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductGender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='gender')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Product Gender',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductImageAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=30)),
                ('relative_path', models.CharField(max_length=500)),
                ('absolute_path', models.CharField(max_length=500)),
                ('dim_product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProduct')),
            ],
            options={
                'verbose_name': 'Product image association',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='keyword')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Product Keyword',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductSizeRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='size range')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Product Size Range',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductSubclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='subclass')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Product Subclass',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='type')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Product Type',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimSeason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_id', models.IntegerField()),
                ('year', models.IntegerField()),
                ('season', models.CharField(max_length=30)),
                ('season_short', models.CharField(max_length=30)),
            ],
            options={
                'verbose_name': 'Season',
                'ordering': ['year', 'season'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='DimVendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='vendor name')),
                ('code', models.CharField(max_length=30, unique=True, verbose_name='vendor code')),
                ('is_active', models.BooleanField()),
                ('dim_location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimLocation', verbose_name='country')),
            ],
            options={
                'verbose_name': 'Vendor',
                'ordering': ['name'],
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='FactAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation_type', models.CharField(max_length=100)),
                ('priority', models.IntegerField()),
                ('ship_date', models.DateField(blank=True, null=True)),
                ('fob', models.FloatField(blank=True, null=True, verbose_name='FOB')),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=500, null=True)),
                ('matching_logic', models.CharField(blank=True, max_length=1000, null=True)),
                ('matching_level', models.CharField(blank=True, max_length=100, null=True)),
                ('similarity', models.FloatField(blank=True, null=True)),
                ('is_approved', models.BooleanField()),
                ('is_selected', models.BooleanField()),
                ('dim_product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProduct')),
                ('dim_product_matching', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='dim_product_matching', to='app_sourcing.DimProduct')),
                ('dim_season', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimSeason')),
                ('dim_vendor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimVendor')),
            ],
            options={
                'verbose_name': 'Allocation',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='FactAllocationAdHoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity', models.FloatField()),
                ('ship_date', models.DateField(blank=True, null=True)),
                ('fob', models.FloatField(blank=True, null=True, verbose_name='FOB')),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('is_selected', models.BooleanField()),
                ('dim_product_matching', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProduct')),
                ('dim_season', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimSeason')),
                ('dim_vendor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimVendor')),
            ],
            options={
                'verbose_name': 'Allocation Ad-Hoc',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='HelperMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.CharField(max_length=500)),
                ('category', models.CharField(max_length=30)),
                ('parent', models.CharField(max_length=500)),
                ('child', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'Mapping',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='HelperMatchingCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_name', models.CharField(max_length=100)),
                ('field_name', models.CharField(max_length=100)),
                ('matching_priority', models.IntegerField(unique=True)),
                ('matching_level', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Matching criteria',
                'verbose_name_plural': 'Matching criteria',
            },
            bases=(models.Model, core.mixins_model.ModelFormFieldNames),
        ),
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=apps.projects.app_sourcing.models.upload_to)),
                ('extension', models.CharField(max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='helpermatchingcriteria',
            unique_together=set([('table_name', 'field_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='helpermapping',
            unique_together=set([('category', 'child')]),
        ),
        migrations.AddField(
            model_name='factallocationadhoc',
            name='uploaded_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.UploadFile'),
        ),
        migrations.AlterUniqueTogether(
            name='dimseason',
            unique_together=set([('year', 'season')]),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_product_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProductClass'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_product_gender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProductGender'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_product_keywords',
            field=models.ManyToManyField(to='app_sourcing.DimProductKeyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_product_sizes',
            field=models.ManyToManyField(to='app_sourcing.DimProductSizeRange', verbose_name='sizes'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_product_subclass',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProductSubclass'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_product_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimProductType'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimSeason'),
        ),
        migrations.AddField(
            model_name='dimproduct',
            name='dim_vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app_sourcing.DimVendor'),
        ),
    ]
